𝗔𝗿𝗿𝗮𝘆𝘀 𝗮𝗻𝗱 𝗦𝘁𝗿𝗶𝗻𝗴𝘀:
1. Find the missing number in an array of integers. ✅
2. Implement an algorithm to rotate an array. ✅
3. Check if a string is a palindrome.✅
4. Find the first non-repeating character in a string. ✅
5. Implement an algorithm to reverse a linked list. ✅
6. Merge two sorted arrays. ✅
7. Implement a stack using arrays/linked list. ✅
8. Write a program to remove duplicates from a sorted array.

𝗟𝗶𝗻𝗸𝗲𝗱 𝗟𝗶𝘀𝘁𝘀:
1. Detect a cycle in a linked list.
2. Find the intersection point of two linked lists.
3. Reverse a linked list in groups of k.
4. Implement a function to add two numbers represented by linked lists.
5. Clone a linked list with next and random pointer.

𝗧𝗿𝗲𝗲𝘀 𝗮𝗻𝗱 𝗕𝗶𝗻𝗮𝗿𝘆 𝗦𝗲𝗮𝗿𝗰𝗵 𝗧𝗿𝗲𝗲𝘀 (𝗕𝗦𝗧):
1. Find the height of a binary tree.
2. Check if a binary tree is balanced.
3. Find the lowest common ancestor in a binary tree.
4. Serialize and deserialize a binary tree.
5. Implement an algorithm for in-order traversal without recursion.
6. Convert a BST to a sorted doubly linked list.

𝗦𝗲𝗮𝗿𝗰𝗵𝗶𝗻𝗴 𝗮𝗻𝗱 𝗦𝗼𝗿𝘁𝗶𝗻𝗴:
1. Implement binary search.
2. Find the kth smallest/largest element in an array.
3. Implement quicksort.
4. Count the number of inversions in an array.
5. Search in a rotated sorted array.
Implement a sorting algorithm for linked lists.

𝗗𝘆𝗻𝗮𝗺𝗶𝗰 𝗣𝗿𝗼𝗴𝗿𝗮𝗺𝗺𝗶𝗻𝗴:
1. Find the longest common subsequence.
2. Calculate the nth Fibonacci number using dynamic programming.
3. Coin change problem.
4. Longest increasing subsequence.
5. Knapsack problem.

𝗚𝗿𝗮𝗽𝗵𝘀 𝗮𝗻𝗱 𝗗𝗙𝗦/𝗕𝗙𝗦:
1. Implement depth-first search (DFS) and breadth-first search (BFS).
2. Check if a graph is cyclic.
3. Shortest path in a weighted graph (Dijkstra's or Bellman-Ford).
4. Topological sort of a directed acyclic graph (DAG).
5. Count the number of connected components in an undirected graph.

𝗠𝗶𝘀𝗰𝗲𝗹𝗹𝗮𝗻𝗲𝗼𝘂𝘀:
1. Implement a LRU (Least Recently Used) cache.
2. Find the median of two sorted arrays.
3. Implement a stack that supports push, pop, top, and retrieving the minimum 4. element in constant time.
5. Design a data structure that supports insert, delete, getRandom() operations in constant time.
6. Check if a Sudoku is valid.
7. Remember to practice solving these problems on a whiteboard or coding platform and explain your thought process clearly during interviews.