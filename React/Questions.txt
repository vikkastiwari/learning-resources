ğŸŒ² What is Redux, and why is it used in React applications?
ğŸŒ² Explain the core principles of Redux (Actions, Reducers, Store).
ğŸŒ² What is a Redux Store? How is it different from React component state?
ğŸŒ² Describe the flow of data in a Redux application.
ğŸŒ² Why is immutability important in Redux, and how is it achieved?
ğŸŒ² What are Redux Actions and Action Creators?
ğŸŒ² Explain the role of Reducers in Redux.
ğŸŒ² What is a Redux Selector? Why and when would you use it?
ğŸŒ² Discuss the difference between Redux Thunk and Redux Saga for handling async actions.
ğŸŒ² What is a Redux Middleware? Provide examples of commonly used middlewares.
ğŸŒ² Explain the purpose of a middleware like redux-thunk in Redux.
ğŸŒ² How does a middleware handle actions in the Redux flow?
ğŸŒ² What are the main features of Redux Toolkit?
ğŸŒ² Explain the concept of 'slices' in Redux Toolkit.
ğŸŒ² Why might someone prefer using RTK over traditional Redux?
ğŸŒ² Discuss the benefits of using createSlice() in Redux Toolkit.
ğŸŒ² How does RTK simplify the Redux setup compared to traditional Redux?
ğŸŒ² Discuss the concept of Redux state normalization and its advantages.
ğŸŒ² Explain the idea of time-travel debugging with Redux DevTools.
ğŸŒ² How does memoization play a role in Redux selectors for performance optimization?
ğŸŒ² Discuss the potential drawbacks of overusing Redux in small to medium-sized applications.
ğŸŒ² Explain the differences between action creators and action types in Redux.
