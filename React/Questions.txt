Redux

Sure, here are concise answers to your questions:

1. **Redux**: Redux is a state management library for JavaScript applications, commonly used with React. It provides a predictable state container and helps manage the state of an application in a more organized manner.

2. **Core Principles of Redux**:
   - **Actions**: Plain JavaScript objects describing changes in the application state.
   - **Reducers**: Functions that specify how the application's state changes in response to actions.
   - **Store**: A single source of truth that holds the application state.

3. **Redux Store vs. React Component State**:
   - Redux Store: Centralized state management for the entire application.
   - React Component State: Localized state management within individual React components.

4. **Flow of Data in Redux**: Actions are dispatched, reducers process these actions to modify the state in the store, and then React components subscribe to changes in the store to re-render as necessary.

5. **Immutability in Redux**: Immutability ensures that state changes are predictable and helps in tracking changes efficiently. It's achieved by creating new objects instead of modifying existing ones.

6. **Redux Actions and Action Creators**: Actions are payloads of information that send data from the application to the store. Action creators are functions that create and return action objects.

7. **Reducers in Redux**: Reducers are pure functions that take the current state and an action, and return a new state based on that action.

8. **Redux Selector**: A Redux Selector is a function that computes derived data from the Redux store state. It's useful for extracting specific pieces of data from the store.

9. **Redux Thunk vs. Redux Saga**: Both are middleware for handling async actions in Redux. Redux Thunk is simpler and based on functions, while Redux Saga offers more control using generator functions.

10. **Redux Middleware**: Middleware provides a third-party extension point between dispatching an action and the moment it reaches the reducer. Examples include redux-thunk for async actions and redux-logger for logging.

11. **Purpose of redux-thunk**: redux-thunk allows action creators to return a function instead of an action object, enabling asynchronous actions.

12. **Middleware Handling Actions**: Middleware intercepts actions before they reach the reducer, allowing for additional processing such as logging, asynchronous operations, etc.

13. **Main Features of Redux Toolkit (RTK)**: Simplified setup, built-in tools for immutable update logic, simplified reducers, and optimized performance.

14. **Slices in Redux Toolkit**: Slices in RTK are portions of the Redux state and associated reducer logic, allowing for more modular and organized code.

15. **Advantages of RTK over Traditional Redux**: RTK reduces boilerplate code, simplifies common Redux patterns, and provides built-in solutions for common use cases.

16. **Benefits of createSlice() in RTK**: createSlice() generates action creators and reducer functions automatically, reducing the amount of boilerplate code needed.

17. **Simplified Setup in RTK**: RTK provides a configureStore() function that simplifies Redux setup by including commonly used middleware and configuration options.

18. **Redux State Normalization**: It's the process of restructuring complex nested state objects into a flat state shape, which simplifies state updates and improves performance.

19. **Time-Travel Debugging with Redux DevTools**: Redux DevTools allows developers to inspect every state and action change in their application over time, enabling easy debugging and history navigation.

20. **Memoization in Redux Selectors**: Memoization caches the result of expensive function calls, improving performance by avoiding unnecessary recomputations of derived data.

21. **Drawbacks of Overusing Redux**: Overusing Redux in small to medium-sized applications can lead to unnecessary complexity, boilerplate code, and performance overhead.

22. **Differences Between Action Creators and Action Types**: Action creators are functions that create actions, while action types are constants that define the type of action being performed.


React

1) What is React? How does it differ from other JavaScript frameworks?
 - Showcase your understanding of React and highlight the key features that set it apart in the JavaScript ecosystem.

2) Explain the concept of Virtual DOM in React. Why is it important?
 - Demonstrate your knowledge of how React optimizes the rendering process through the Virtual DOM and its impact on performance.

3) What is Redux, and how does it manage the state in a React application?
 - Showcase your understanding of Redux and its role in managing the state of a React application in a scalable and maintainable way.

4) How does React Router work, and what are its key components?
 - Discuss your expertise in client-side navigation using React Router and its components like `BrowserRouter` and `Link`.

5) What are Higher Order Components (HOCs) in React?
 - Explain how HOCs enhance code reusability and share examples of situations where you would use them in a React application.

6) Describe the role of Middleware in Redux. Can you give an example of a Redux Middleware?
 - Demonstrate your understanding of Redux Middleware and how it can be employed to perform tasks like logging or asynchronous operations.

7) What is the purpose of the connect() function in React Redux?
 - Showcase your familiarity with the `connect()` function, explaining how it connects a React component to the Redux store and facilitates state management.

8) How does React handle forms? Explain controlled and uncontrolled components.
 - Discuss your knowledge of form handling in React, covering controlled components and uncontrolled components and when to use each.

9) What are React Hooks, and how do they differ from class components?
 - Highlight your proficiency with React Hooks, emphasizing their role in functional components and the advantages they offer over class components.

10) Can you compare React's Context API with Redux? When would you choose one over the other?
 - Illustrate your understanding of when to use React's Context API or Redux for state management in a React application.


--------------Master React Js---------------

 - Diffing Algorithm - it compares virtual dom and real dom and makes the necessary changes
 - React Fiber - It runs diffing Algorithm in batch wise rather running all at once.
 - Synthetic Events - React exposes all Dom like apis and handles the same before giving it to browser which makes the react code base cross browser compatible
 - Hooks Introduced because it simplifies the testing, the logic is not locked, all things with state can be managed using funciton based components.


---------------------Widely Asked Questions---------------------------
- Hooks
   - useState
   - useEffect
   - useContext
   - useReducer
   - useMemo
   - useCallback - is a hook in React that is used to memoize functions, preventing unnecessary re-renders in functional components. 
   - useRef

- HigherOrderComponents - how, why, when, what
- LifeCycle Methods of Components - Mounting, Updating, Unmounting
- State Management - state/props, props drilling, react context
- Redux/Zustand - RTK
- Custom Hooks - explain/code
- Lazy Loading - code spliting, code chunking, suspense
- Virtual Dom - Reconcilation, React /Fiber - Render
- SSR vs CSR - SEO/ performance
- Routing - RBAC - react-router, protected routes, query params, dynamic Routing, wild card routes
- Testing - React Testing Lib, unit testing
- Async Task - Promise, async/await, setTimeout, Events, Fetches, Axios
- Reusability / Modularity / Testability
- Performance - Webpack Bundler, CDN
- Rendering
- SEO
- Styling - Tailwing, StyleX, Ant UI, Bootstrap, Material UI, etc
- Shimmering Effect
- Accessibility

------------------

Render props
HOC
Custom Hooks - useCustomHook