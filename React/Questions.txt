Redux

ðŸŒ² What is Redux, and why is it used in React applications?
ðŸŒ² Explain the core principles of Redux (Actions, Reducers, Store).
ðŸŒ² What is a Redux Store? How is it different from React component state?
ðŸŒ² Describe the flow of data in a Redux application.
ðŸŒ² Why is immutability important in Redux, and how is it achieved?
ðŸŒ² What are Redux Actions and Action Creators?
ðŸŒ² Explain the role of Reducers in Redux.
ðŸŒ² What is a Redux Selector? Why and when would you use it?
ðŸŒ² Discuss the difference between Redux Thunk and Redux Saga for handling async actions.
ðŸŒ² What is a Redux Middleware? Provide examples of commonly used middlewares.
ðŸŒ² Explain the purpose of a middleware like redux-thunk in Redux.
ðŸŒ² How does a middleware handle actions in the Redux flow?
ðŸŒ² What are the main features of Redux Toolkit?
ðŸŒ² Explain the concept of 'slices' in Redux Toolkit.
ðŸŒ² Why might someone prefer using RTK over traditional Redux?
ðŸŒ² Discuss the benefits of using createSlice() in Redux Toolkit.
ðŸŒ² How does RTK simplify the Redux setup compared to traditional Redux?
ðŸŒ² Discuss the concept of Redux state normalization and its advantages.
ðŸŒ² Explain the idea of time-travel debugging with Redux DevTools.
ðŸŒ² How does memoization play a role in Redux selectors for performance optimization?
ðŸŒ² Discuss the potential drawbacks of overusing Redux in small to medium-sized applications.
ðŸŒ² Explain the differences between action creators and action types in Redux.


React

1) What is React? How does it differ from other JavaScript frameworks?
 - Showcase your understanding of React and highlight the key features that set it apart in the JavaScript ecosystem.

2) Explain the concept of Virtual DOM in React. Why is it important?
 - Demonstrate your knowledge of how React optimizes the rendering process through the Virtual DOM and its impact on performance.

3) What is Redux, and how does it manage the state in a React application?
 - Showcase your understanding of Redux and its role in managing the state of a React application in a scalable and maintainable way.

4) How does React Router work, and what are its key components?
 - Discuss your expertise in client-side navigation using React Router and its components like `BrowserRouter` and `Link`.

5) What are Higher Order Components (HOCs) in React?
 - Explain how HOCs enhance code reusability and share examples of situations where you would use them in a React application.

6) Describe the role of Middleware in Redux. Can you give an example of a Redux Middleware?
 - Demonstrate your understanding of Redux Middleware and how it can be employed to perform tasks like logging or asynchronous operations.

7) What is the purpose of the connect() function in React Redux?
 - Showcase your familiarity with the `connect()` function, explaining how it connects a React component to the Redux store and facilitates state management.

8) How does React handle forms? Explain controlled and uncontrolled components.
 - Discuss your knowledge of form handling in React, covering controlled components and uncontrolled components and when to use each.

9) What are React Hooks, and how do they differ from class components?
 - Highlight your proficiency with React Hooks, emphasizing their role in functional components and the advantages they offer over class components.

10) Can you compare React's Context API with Redux? When would you choose one over the other?
 - Illustrate your understanding of when to use React's Context API or Redux for state management in a React application.